upstream readcode {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/opt/www/readcode/tmp/thin.sock fail_timeout=0;
}


server {
  server_name readcode.in;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 2;

  #rewrite favicon.ico redirect from non root locations to the root favicon
  rewrite ^/(.*)/favicon.ico$ /favicon.ico last;

  # path for static files
  root /opt/www/readcode/public;

  try_files $uri.html $uri @proxy;

  location @proxy{
    proxy_set_header  X-Real-IP        $remote_addr;
    proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
     proxy_set_header X-Forwarded-Proto $scheme;
    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    proxy_pass http://readcode;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /opt/www/readcode/public;
  }

}
